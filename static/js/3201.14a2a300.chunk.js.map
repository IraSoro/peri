{"version":3,"file":"static/js/3201.14a2a300.chunk.js","mappings":"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","sources":["../node_modules/@stencil/core/internal/client/shadow-css.js"],"sourcesContent":["// src/utils/regular-expression.ts\nvar escapeRegExpSpecialCharacters = (text) => {\n  return text.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\n};\n\n// src/utils/shadow-css.ts\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n *\n * This file is a port of shadowCSS from `webcomponents.js` to TypeScript.\n * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js\n * https://github.com/angular/angular/blob/master/packages/compiler/src/shadow_css.ts\n */\nvar safeSelector = (selector) => {\n  const placeholders = [];\n  let index = 0;\n  selector = selector.replace(/(\\[[^\\]]*\\])/g, (_, keep) => {\n    const replaceBy = `__ph-${index}__`;\n    placeholders.push(keep);\n    index++;\n    return replaceBy;\n  });\n  const content = selector.replace(/(:nth-[-\\w]+)(\\([^)]+\\))/g, (_, pseudo, exp) => {\n    const replaceBy = `__ph-${index}__`;\n    placeholders.push(exp);\n    index++;\n    return pseudo + replaceBy;\n  });\n  const ss = {\n    content,\n    placeholders\n  };\n  return ss;\n};\nvar restoreSafeSelector = (placeholders, content) => {\n  return content.replace(/__ph-(\\d+)__/g, (_, index) => placeholders[+index]);\n};\nvar _polyfillHost = \"-shadowcsshost\";\nvar _polyfillSlotted = \"-shadowcssslotted\";\nvar _polyfillHostContext = \"-shadowcsscontext\";\nvar _parenSuffix = \")(?:\\\\(((?:\\\\([^)(]*\\\\)|[^)(]*)+?)\\\\))?([^,{]*)\";\nvar _cssColonHostRe = new RegExp(\"(\" + _polyfillHost + _parenSuffix, \"gim\");\nvar _cssColonHostContextRe = new RegExp(\"(\" + _polyfillHostContext + _parenSuffix, \"gim\");\nvar _cssColonSlottedRe = new RegExp(\"(\" + _polyfillSlotted + _parenSuffix, \"gim\");\nvar _polyfillHostNoCombinator = _polyfillHost + \"-no-combinator\";\nvar _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\\s]*)/;\nvar _shadowDOMSelectorsRe = [/::shadow/g, /::content/g];\nvar _selectorReSuffix = \"([>\\\\s~+[.,{:][\\\\s\\\\S]*)?$\";\nvar _polyfillHostRe = /-shadowcsshost/gim;\nvar createSupportsRuleRe = (selector) => new RegExp(`((?<!(^@supports(.*)))|(?<={.*))(${selector}\\\\b)`, \"gim\");\nvar _colonSlottedRe = createSupportsRuleRe(\"::slotted\");\nvar _colonHostRe = createSupportsRuleRe(\":host\");\nvar _colonHostContextRe = createSupportsRuleRe(\":host-context\");\nvar _commentRe = /\\/\\*\\s*[\\s\\S]*?\\*\\//g;\nvar stripComments = (input) => {\n  return input.replace(_commentRe, \"\");\n};\nvar _commentWithHashRe = /\\/\\*\\s*#\\s*source(Mapping)?URL=[\\s\\S]+?\\*\\//g;\nvar extractCommentsWithHash = (input) => {\n  return input.match(_commentWithHashRe) || [];\n};\nvar _ruleRe = /(\\s*)([^;\\{\\}]+?)(\\s*)((?:{%BLOCK%}?\\s*;?)|(?:\\s*;))/g;\nvar _curlyRe = /([{}])/g;\nvar _selectorPartsRe = /(^.*?[^\\\\])??((:+)(.*)|$)/;\nvar OPEN_CURLY = \"{\";\nvar CLOSE_CURLY = \"}\";\nvar BLOCK_PLACEHOLDER = \"%BLOCK%\";\nvar processRules = (input, ruleCallback) => {\n  const inputWithEscapedBlocks = escapeBlocks(input);\n  let nextBlockIndex = 0;\n  return inputWithEscapedBlocks.escapedString.replace(_ruleRe, (...m) => {\n    const selector = m[2];\n    let content = \"\";\n    let suffix = m[4];\n    let contentPrefix = \"\";\n    if (suffix && suffix.startsWith(\"{\" + BLOCK_PLACEHOLDER)) {\n      content = inputWithEscapedBlocks.blocks[nextBlockIndex++];\n      suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);\n      contentPrefix = \"{\";\n    }\n    const cssRule = {\n      selector,\n      content\n    };\n    const rule = ruleCallback(cssRule);\n    return `${m[1]}${rule.selector}${m[3]}${contentPrefix}${rule.content}${suffix}`;\n  });\n};\nvar escapeBlocks = (input) => {\n  const inputParts = input.split(_curlyRe);\n  const resultParts = [];\n  const escapedBlocks = [];\n  let bracketCount = 0;\n  let currentBlockParts = [];\n  for (let partIndex = 0; partIndex < inputParts.length; partIndex++) {\n    const part = inputParts[partIndex];\n    if (part === CLOSE_CURLY) {\n      bracketCount--;\n    }\n    if (bracketCount > 0) {\n      currentBlockParts.push(part);\n    } else {\n      if (currentBlockParts.length > 0) {\n        escapedBlocks.push(currentBlockParts.join(\"\"));\n        resultParts.push(BLOCK_PLACEHOLDER);\n        currentBlockParts = [];\n      }\n      resultParts.push(part);\n    }\n    if (part === OPEN_CURLY) {\n      bracketCount++;\n    }\n  }\n  if (currentBlockParts.length > 0) {\n    escapedBlocks.push(currentBlockParts.join(\"\"));\n    resultParts.push(BLOCK_PLACEHOLDER);\n  }\n  const strEscapedBlocks = {\n    escapedString: resultParts.join(\"\"),\n    blocks: escapedBlocks\n  };\n  return strEscapedBlocks;\n};\nvar insertPolyfillHostInCssText = (cssText) => {\n  cssText = cssText.replace(_colonHostContextRe, `$1${_polyfillHostContext}`).replace(_colonHostRe, `$1${_polyfillHost}`).replace(_colonSlottedRe, `$1${_polyfillSlotted}`);\n  return cssText;\n};\nvar convertColonRule = (cssText, regExp, partReplacer) => {\n  return cssText.replace(regExp, (...m) => {\n    if (m[2]) {\n      const parts = m[2].split(\",\");\n      const r = [];\n      for (let i = 0; i < parts.length; i++) {\n        const p = parts[i].trim();\n        if (!p) break;\n        r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));\n      }\n      return r.join(\",\");\n    } else {\n      return _polyfillHostNoCombinator + m[3];\n    }\n  });\n};\nvar colonHostPartReplacer = (host, part, suffix) => {\n  return host + part.replace(_polyfillHost, \"\") + suffix;\n};\nvar convertColonHost = (cssText) => {\n  return convertColonRule(cssText, _cssColonHostRe, colonHostPartReplacer);\n};\nvar colonHostContextPartReplacer = (host, part, suffix) => {\n  if (part.indexOf(_polyfillHost) > -1) {\n    return colonHostPartReplacer(host, part, suffix);\n  } else {\n    return host + part + suffix + \", \" + part + \" \" + host + suffix;\n  }\n};\nvar convertColonSlotted = (cssText, slotScopeId) => {\n  const slotClass = \".\" + slotScopeId + \" > \";\n  const selectors = [];\n  cssText = cssText.replace(_cssColonSlottedRe, (...m) => {\n    if (m[2]) {\n      const compound = m[2].trim();\n      const suffix = m[3];\n      const slottedSelector = slotClass + compound + suffix;\n      let prefixSelector = \"\";\n      for (let i = m[4] - 1; i >= 0; i--) {\n        const char = m[5][i];\n        if (char === \"}\" || char === \",\") {\n          break;\n        }\n        prefixSelector = char + prefixSelector;\n      }\n      const orgSelector = (prefixSelector + slottedSelector).trim();\n      const addedSelector = `${prefixSelector.trimEnd()}${slottedSelector.trim()}`.trim();\n      if (orgSelector !== addedSelector) {\n        const updatedSelector = `${addedSelector}, ${orgSelector}`;\n        selectors.push({\n          orgSelector,\n          updatedSelector\n        });\n      }\n      return slottedSelector;\n    } else {\n      return _polyfillHostNoCombinator + m[3];\n    }\n  });\n  return {\n    selectors,\n    cssText\n  };\n};\nvar convertColonHostContext = (cssText) => {\n  return convertColonRule(cssText, _cssColonHostContextRe, colonHostContextPartReplacer);\n};\nvar convertShadowDOMSelectors = (cssText) => {\n  return _shadowDOMSelectorsRe.reduce((result, pattern) => result.replace(pattern, \" \"), cssText);\n};\nvar makeScopeMatcher = (scopeSelector2) => {\n  const lre = /\\[/g;\n  const rre = /\\]/g;\n  scopeSelector2 = scopeSelector2.replace(lre, \"\\\\[\").replace(rre, \"\\\\]\");\n  return new RegExp(\"^(\" + scopeSelector2 + \")\" + _selectorReSuffix, \"m\");\n};\nvar selectorNeedsScoping = (selector, scopeSelector2) => {\n  const re = makeScopeMatcher(scopeSelector2);\n  return !re.test(selector);\n};\nvar injectScopingSelector = (selector, scopingSelector) => {\n  return selector.replace(_selectorPartsRe, (_, before = \"\", _colonGroup, colon = \"\", after = \"\") => {\n    return before + scopingSelector + colon + after;\n  });\n};\nvar applySimpleSelectorScope = (selector, scopeSelector2, hostSelector) => {\n  _polyfillHostRe.lastIndex = 0;\n  if (_polyfillHostRe.test(selector)) {\n    const replaceBy = `.${hostSelector}`;\n    return selector.replace(_polyfillHostNoCombinatorRe, (_, selector2) => injectScopingSelector(selector2, replaceBy)).replace(_polyfillHostRe, replaceBy + \" \");\n  }\n  return scopeSelector2 + \" \" + selector;\n};\nvar applyStrictSelectorScope = (selector, scopeSelector2, hostSelector) => {\n  const isRe = /\\[is=([^\\]]*)\\]/g;\n  scopeSelector2 = scopeSelector2.replace(isRe, (_, ...parts) => parts[0]);\n  const className = \".\" + scopeSelector2;\n  const _scopeSelectorPart = (p) => {\n    let scopedP = p.trim();\n    if (!scopedP) {\n      return \"\";\n    }\n    if (p.indexOf(_polyfillHostNoCombinator) > -1) {\n      scopedP = applySimpleSelectorScope(p, scopeSelector2, hostSelector);\n    } else {\n      const t = p.replace(_polyfillHostRe, \"\");\n      if (t.length > 0) {\n        scopedP = injectScopingSelector(t, className);\n      }\n    }\n    return scopedP;\n  };\n  const safeContent = safeSelector(selector);\n  selector = safeContent.content;\n  let scopedSelector = \"\";\n  let startIndex = 0;\n  let res;\n  const sep = /( |>|\\+|~(?!=))\\s*/g;\n  const hasHost = selector.indexOf(_polyfillHostNoCombinator) > -1;\n  let shouldScope = !hasHost;\n  while ((res = sep.exec(selector)) !== null) {\n    const separator = res[1];\n    const part2 = selector.slice(startIndex, res.index).trim();\n    shouldScope = shouldScope || part2.indexOf(_polyfillHostNoCombinator) > -1;\n    const scopedPart = shouldScope ? _scopeSelectorPart(part2) : part2;\n    scopedSelector += `${scopedPart} ${separator} `;\n    startIndex = sep.lastIndex;\n  }\n  const part = selector.substring(startIndex);\n  shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\n  scopedSelector += shouldScope ? _scopeSelectorPart(part) : part;\n  return restoreSafeSelector(safeContent.placeholders, scopedSelector);\n};\nvar scopeSelector = (selector, scopeSelectorText, hostSelector, slotSelector) => {\n  return selector.split(\",\").map((shallowPart) => {\n    if (slotSelector && shallowPart.indexOf(\".\" + slotSelector) > -1) {\n      return shallowPart.trim();\n    }\n    if (selectorNeedsScoping(shallowPart, scopeSelectorText)) {\n      return applyStrictSelectorScope(shallowPart, scopeSelectorText, hostSelector).trim();\n    } else {\n      return shallowPart.trim();\n    }\n  }).join(\", \");\n};\nvar scopeSelectors = (cssText, scopeSelectorText, hostSelector, slotSelector) => {\n  return processRules(cssText, (rule) => {\n    let selector = rule.selector;\n    let content = rule.content;\n    if (rule.selector[0] !== \"@\") {\n      selector = scopeSelector(rule.selector, scopeSelectorText, hostSelector, slotSelector);\n    } else if (rule.selector.startsWith(\"@media\") || rule.selector.startsWith(\"@supports\") || rule.selector.startsWith(\"@page\") || rule.selector.startsWith(\"@document\")) {\n      content = scopeSelectors(rule.content, scopeSelectorText, hostSelector, slotSelector);\n    }\n    const cssRule = {\n      selector: selector.replace(/\\s{2,}/g, \" \").trim(),\n      content\n    };\n    return cssRule;\n  });\n};\nvar scopeCssText = (cssText, scopeId, hostScopeId, slotScopeId) => {\n  cssText = insertPolyfillHostInCssText(cssText);\n  cssText = convertColonHost(cssText);\n  cssText = convertColonHostContext(cssText);\n  const slotted = convertColonSlotted(cssText, slotScopeId);\n  cssText = slotted.cssText;\n  cssText = convertShadowDOMSelectors(cssText);\n  if (scopeId) {\n    cssText = scopeSelectors(cssText, scopeId, hostScopeId, slotScopeId);\n  }\n  cssText = replaceShadowCssHost(cssText, hostScopeId);\n  cssText = cssText.replace(/>\\s*\\*\\s+([^{, ]+)/gm, \" $1 \");\n  return {\n    cssText: cssText.trim(),\n    // We need to replace the shadow CSS host string in each of these selectors since we created\n    // them prior to the replacement happening in the components CSS text.\n    slottedSelectors: slotted.selectors.map((ref) => ({\n      orgSelector: replaceShadowCssHost(ref.orgSelector, hostScopeId),\n      updatedSelector: replaceShadowCssHost(ref.updatedSelector, hostScopeId)\n    }))\n  };\n};\nvar replaceShadowCssHost = (cssText, hostScopeId) => {\n  return cssText.replace(/-shadowcsshost-no-combinator/g, `.${hostScopeId}`);\n};\nvar scopeCss = (cssText, scopeId) => {\n  const hostScopeId = scopeId + \"-h\";\n  const slotScopeId = scopeId + \"-s\";\n  const commentsWithHash = extractCommentsWithHash(cssText);\n  cssText = stripComments(cssText);\n  const scoped = scopeCssText(cssText, scopeId, hostScopeId, slotScopeId);\n  cssText = [scoped.cssText, ...commentsWithHash].join(\"\\n\");\n  scoped.slottedSelectors.forEach((slottedSelector) => {\n    const regex = new RegExp(escapeRegExpSpecialCharacters(slottedSelector.orgSelector), \"g\");\n    cssText = cssText.replace(regex, slottedSelector.updatedSelector);\n  });\n  return cssText;\n};\nexport {\n  scopeCss\n};\n"],"names":["_polyfillHost","_polyfillSlotted","_polyfillHostContext","_parenSuffix","_cssColonHostRe","RegExp","_cssColonHostContextRe","_cssColonSlottedRe","_polyfillHostNoCombinator","_polyfillHostNoCombinatorRe","_shadowDOMSelectorsRe","_polyfillHostRe","createSupportsRuleRe","selector","concat","_colonSlottedRe","_colonHostRe","_colonHostContextRe","_commentRe","_commentWithHashRe","_ruleRe","_curlyRe","_selectorPartsRe","BLOCK_PLACEHOLDER","escapeBlocks","input","inputParts","split","resultParts","escapedBlocks","bracketCount","currentBlockParts","partIndex","length","part","push","join","escapedString","blocks","convertColonRule","cssText","regExp","partReplacer","replace","_len","arguments","m","Array","_key","parts","r","i","p","trim","colonHostPartReplacer","host","suffix","colonHostContextPartReplacer","indexOf","selectorNeedsScoping","scopeSelector2","re","makeScopeMatcher","test","injectScopingSelector","scopingSelector","_","undefined","applyStrictSelectorScope","hostSelector","res","className","_scopeSelectorPart","scopedP","lastIndex","replaceBy","selector2","applySimpleSelectorScope","t","safeContent","placeholders","index","content","keep","pseudo","exp","safeSelector","scopedSelector","startIndex","sep","shouldScope","exec","separator","part2","slice","scopedPart","substring","scopeSelectors","scopeSelectorText","slotSelector","ruleCallback","inputWithEscapedBlocks","nextBlockIndex","contentPrefix","startsWith","rule","processRules","map","shallowPart","scopeSelector","scopeCssText","scopeId","hostScopeId","slotScopeId","slotted","slotClass","selectors","_len2","_key2","compound","slottedSelector","prefixSelector","char","orgSelector","addedSelector","trimEnd","updatedSelector","convertColonSlotted","convertColonHostContext","convertColonHost","insertPolyfillHostInCssText","reduce","result","pattern","convertShadowDOMSelectors","replaceShadowCssHost","slottedSelectors","ref","scopeCss","commentsWithHash","match","stripComments","scoped","_toConsumableArray","forEach","regex"],"sourceRoot":""}