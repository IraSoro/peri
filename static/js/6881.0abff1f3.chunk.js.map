{"version":3,"file":"static/js/6881.0abff1f3.chunk.js","mappings":"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","sources":["../node_modules/@ionic/react/node_modules/@ionic/core/components/input-shims.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { w as win, d as doc } from './index5.js';\nimport { g as getScrollElement, c as scrollByPoint, a as findClosestIonContent } from './index8.js';\nimport { a as addEventListener, b as removeEventListener, r as raf, c as componentOnReady } from './helpers.js';\nimport { a as KeyboardResize, K as Keyboard } from './keyboard.js';\n\nconst cloneMap = new WeakMap();\nconst relocateInput = (componentEl, inputEl, shouldRelocate, inputRelativeY = 0, disabledClonedInput = false) => {\n    if (cloneMap.has(componentEl) === shouldRelocate) {\n        return;\n    }\n    if (shouldRelocate) {\n        addClone(componentEl, inputEl, inputRelativeY, disabledClonedInput);\n    }\n    else {\n        removeClone(componentEl, inputEl);\n    }\n};\nconst isFocused = (input) => {\n    /**\n     * https://developer.mozilla.org/en-US/docs/Web/API/Node/getRootNode\n     * Calling getRootNode on an element in standard web page will return HTMLDocument.\n     * Calling getRootNode on an element inside of the Shadow DOM will return the associated ShadowRoot.\n     * Calling getRootNode on an element that is not attached to a document/shadow tree will return\n     * the root of the DOM tree it belongs to.\n     * isFocused is used for the hide-caret utility which only considers input/textarea elements\n     * that are present in the DOM, so we don't set types for that final case since it does not apply.\n     */\n    return input === input.getRootNode().activeElement;\n};\nconst addClone = (componentEl, inputEl, inputRelativeY, disabledClonedInput = false) => {\n    // this allows for the actual input to receive the focus from\n    // the user's touch event, but before it receives focus, it\n    // moves the actual input to a location that will not screw\n    // up the app's layout, and does not allow the native browser\n    // to attempt to scroll the input into place (messing up headers/footers)\n    // the cloned input fills the area of where native input should be\n    // while the native input fakes out the browser by relocating itself\n    // before it receives the actual focus event\n    // We hide the focused input (with the visible caret) invisible by making it scale(0),\n    const parentEl = inputEl.parentNode;\n    // DOM WRITES\n    const clonedEl = inputEl.cloneNode(false);\n    clonedEl.classList.add('cloned-input');\n    clonedEl.tabIndex = -1;\n    /**\n     * Making the cloned input disabled prevents\n     * Chrome for Android from still scrolling\n     * the entire page since this cloned input\n     * will briefly be hidden by the keyboard\n     * even though it is not focused.\n     *\n     * This is not needed on iOS. While this\n     * does not cause functional issues on iOS,\n     * the input still appears slightly dimmed even\n     * if we set opacity: 1.\n     */\n    if (disabledClonedInput) {\n        clonedEl.disabled = true;\n    }\n    parentEl.appendChild(clonedEl);\n    cloneMap.set(componentEl, clonedEl);\n    const doc = componentEl.ownerDocument;\n    const tx = doc.dir === 'rtl' ? 9999 : -9999;\n    componentEl.style.pointerEvents = 'none';\n    inputEl.style.transform = `translate3d(${tx}px,${inputRelativeY}px,0) scale(0)`;\n};\nconst removeClone = (componentEl, inputEl) => {\n    const clone = cloneMap.get(componentEl);\n    if (clone) {\n        cloneMap.delete(componentEl);\n        clone.remove();\n    }\n    componentEl.style.pointerEvents = '';\n    inputEl.style.transform = '';\n};\n/**\n * Factoring in 50px gives us some room\n * in case the keyboard shows password/autofill bars\n * asynchronously.\n */\nconst SCROLL_AMOUNT_PADDING = 50;\n\nconst enableHideCaretOnScroll = (componentEl, inputEl, scrollEl) => {\n    if (!scrollEl || !inputEl) {\n        return () => {\n            return;\n        };\n    }\n    const scrollHideCaret = (shouldHideCaret) => {\n        if (isFocused(inputEl)) {\n            relocateInput(componentEl, inputEl, shouldHideCaret);\n        }\n    };\n    const onBlur = () => relocateInput(componentEl, inputEl, false);\n    const hideCaret = () => scrollHideCaret(true);\n    const showCaret = () => scrollHideCaret(false);\n    addEventListener(scrollEl, 'ionScrollStart', hideCaret);\n    addEventListener(scrollEl, 'ionScrollEnd', showCaret);\n    inputEl.addEventListener('blur', onBlur);\n    return () => {\n        removeEventListener(scrollEl, 'ionScrollStart', hideCaret);\n        removeEventListener(scrollEl, 'ionScrollEnd', showCaret);\n        inputEl.removeEventListener('blur', onBlur);\n    };\n};\n\nconst SKIP_SELECTOR = 'input, textarea, [no-blur], [contenteditable]';\nconst enableInputBlurring = () => {\n    let focused = true;\n    let didScroll = false;\n    const doc = document;\n    const onScroll = () => {\n        didScroll = true;\n    };\n    const onFocusin = () => {\n        focused = true;\n    };\n    const onTouchend = (ev) => {\n        // if app did scroll return early\n        if (didScroll) {\n            didScroll = false;\n            return;\n        }\n        const active = doc.activeElement;\n        if (!active) {\n            return;\n        }\n        // only blur if the active element is a text-input or a textarea\n        if (active.matches(SKIP_SELECTOR)) {\n            return;\n        }\n        // if the selected target is the active element, do not blur\n        const tapped = ev.target;\n        if (tapped === active) {\n            return;\n        }\n        if (tapped.matches(SKIP_SELECTOR) || tapped.closest(SKIP_SELECTOR)) {\n            return;\n        }\n        focused = false;\n        // TODO FW-2796: find a better way, why 50ms?\n        setTimeout(() => {\n            if (!focused) {\n                active.blur();\n            }\n        }, 50);\n    };\n    addEventListener(doc, 'ionScrollStart', onScroll);\n    doc.addEventListener('focusin', onFocusin, true);\n    doc.addEventListener('touchend', onTouchend, false);\n    return () => {\n        removeEventListener(doc, 'ionScrollStart', onScroll, true);\n        doc.removeEventListener('focusin', onFocusin, true);\n        doc.removeEventListener('touchend', onTouchend, false);\n    };\n};\n\nconst SCROLL_ASSIST_SPEED = 0.3;\nconst getScrollData = (componentEl, contentEl, keyboardHeight, platformHeight) => {\n    var _a;\n    const itemEl = (_a = componentEl.closest('ion-item,[ion-item]')) !== null && _a !== void 0 ? _a : componentEl;\n    return calcScrollData(itemEl.getBoundingClientRect(), contentEl.getBoundingClientRect(), keyboardHeight, platformHeight);\n};\nconst calcScrollData = (inputRect, contentRect, keyboardHeight, platformHeight) => {\n    // compute input's Y values relative to the body\n    const inputTop = inputRect.top;\n    const inputBottom = inputRect.bottom;\n    // compute visible area\n    const visibleAreaTop = contentRect.top;\n    const visibleAreaBottom = Math.min(contentRect.bottom, platformHeight - keyboardHeight);\n    // compute safe area\n    const safeAreaTop = visibleAreaTop + 15;\n    const safeAreaBottom = visibleAreaBottom - SCROLL_AMOUNT_PADDING;\n    // figure out if each edge of the input is within the safe area\n    const distanceToBottom = safeAreaBottom - inputBottom;\n    const distanceToTop = safeAreaTop - inputTop;\n    // desiredScrollAmount is the negated distance to the safe area according to our calculations.\n    const desiredScrollAmount = Math.round(distanceToBottom < 0 ? -distanceToBottom : distanceToTop > 0 ? -distanceToTop : 0);\n    // our calculations make some assumptions that aren't always true, like the keyboard being closed when an input\n    // gets focus, so make sure we don't scroll the input above the visible area\n    const scrollAmount = Math.min(desiredScrollAmount, inputTop - visibleAreaTop);\n    const distance = Math.abs(scrollAmount);\n    const duration = distance / SCROLL_ASSIST_SPEED;\n    const scrollDuration = Math.min(400, Math.max(150, duration));\n    return {\n        scrollAmount,\n        scrollDuration,\n        scrollPadding: keyboardHeight,\n        inputSafeY: -(inputTop - safeAreaTop) + 4,\n    };\n};\n\nconst PADDING_TIMER_KEY = '$ionPaddingTimer';\n/**\n * Scroll padding adds additional padding to the bottom\n * of ion-content so that there is enough scroll space\n * for an input to be scrolled above the keyboard. This\n * is needed in environments where the webview does not\n * resize when the keyboard opens.\n *\n * Example: If an input at the bottom of ion-content is\n * focused, there is no additional scrolling space below\n * it, so the input cannot be scrolled above the keyboard.\n * Scroll padding fixes this by adding padding equal to the\n * height of the keyboard to the bottom of the content.\n *\n * Common environments where this is needed:\n * - Mobile Safari: The keyboard overlays the content\n * - Capacitor/Cordova on iOS: The keyboard overlays the content\n * when the KeyboardResize mode is set to 'none'.\n */\nconst setScrollPadding = (contentEl, paddingAmount, clearCallback) => {\n    const timer = contentEl[PADDING_TIMER_KEY];\n    if (timer) {\n        clearTimeout(timer);\n    }\n    if (paddingAmount > 0) {\n        contentEl.style.setProperty('--keyboard-offset', `${paddingAmount}px`);\n    }\n    else {\n        contentEl[PADDING_TIMER_KEY] = setTimeout(() => {\n            contentEl.style.setProperty('--keyboard-offset', '0px');\n            if (clearCallback) {\n                clearCallback();\n            }\n        }, 120);\n    }\n};\n/**\n * When an input is about to be focused,\n * set a timeout to clear any scroll padding\n * on the content. Note: The clearing\n * is done on a timeout so that if users\n * are moving focus from one input to the next\n * then re-adding scroll padding to the new\n * input with cancel the timeout to clear the\n * scroll padding.\n */\nconst setClearScrollPaddingListener = (inputEl, contentEl, doneCallback) => {\n    const clearScrollPadding = () => {\n        if (contentEl) {\n            setScrollPadding(contentEl, 0, doneCallback);\n        }\n    };\n    inputEl.addEventListener('focusout', clearScrollPadding, { once: true });\n};\n\nlet currentPadding = 0;\nconst SKIP_SCROLL_ASSIST = 'data-ionic-skip-scroll-assist';\nconst enableScrollAssist = (componentEl, inputEl, contentEl, footerEl, keyboardHeight, enableScrollPadding, keyboardResize, disableClonedInput = false) => {\n    /**\n     * Scroll padding should only be added if:\n     * 1. The global scrollPadding config option\n     * is set to true.\n     * 2. The native keyboard resize mode is either \"none\"\n     * (keyboard overlays webview) or undefined (resize\n     * information unavailable)\n     * Resize info is available on Capacitor 4+\n     */\n    const addScrollPadding = enableScrollPadding && (keyboardResize === undefined || keyboardResize.mode === KeyboardResize.None);\n    /**\n     * This tracks whether or not the keyboard has been\n     * presented for a single focused text field. Note\n     * that it does not track if the keyboard is open\n     * in general such as if the keyboard is open for\n     * a different focused text field.\n     */\n    let hasKeyboardBeenPresentedForTextField = false;\n    /**\n     * When adding scroll padding we need to know\n     * how much of the viewport the keyboard obscures.\n     * We do this by subtracting the keyboard height\n     * from the platform height.\n     *\n     * If we compute this value when switching between\n     * inputs then the webview may already be resized.\n     * At this point, `win.innerHeight` has already accounted\n     * for the keyboard meaning we would then subtract\n     * the keyboard height again. This will result in the input\n     * being scrolled more than it needs to.\n     */\n    const platformHeight = win !== undefined ? win.innerHeight : 0;\n    /**\n     * Scroll assist is run when a text field\n     * is focused. However, it may need to\n     * re-run when the keyboard size changes\n     * such that the text field is now hidden\n     * underneath the keyboard.\n     * This function re-runs scroll assist\n     * when that happens.\n     *\n     * One limitation of this is on a web browser\n     * where native keyboard APIs do not have cross-browser\n     * support. `ionKeyboardDidShow` relies on the Visual Viewport API.\n     * This means that if the keyboard changes but does not change\n     * geometry, then scroll assist will not re-run even if\n     * the user has scrolled the text field under the keyboard.\n     * This is not a problem when running in Cordova/Capacitor\n     * because `ionKeyboardDidShow` uses the native events\n     * which fire every time the keyboard changes.\n     */\n    const keyboardShow = (ev) => {\n        /**\n         * If the keyboard has not yet been presented\n         * for this text field then the text field has just\n         * received focus. In that case, the focusin listener\n         * will run scroll assist.\n         */\n        if (hasKeyboardBeenPresentedForTextField === false) {\n            hasKeyboardBeenPresentedForTextField = true;\n            return;\n        }\n        /**\n         * Otherwise, the keyboard has already been presented\n         * for the focused text field.\n         * This means that the keyboard likely changed\n         * geometry, and we need to re-run scroll assist.\n         * This can happen when the user rotates their device\n         * or when they switch keyboards.\n         *\n         * Make sure we pass in the computed keyboard height\n         * rather than the estimated keyboard height.\n         *\n         * Since the keyboard is already open then we do not\n         * need to wait for the webview to resize, so we pass\n         * \"waitForResize: false\".\n         */\n        jsSetFocus(componentEl, inputEl, contentEl, footerEl, ev.detail.keyboardHeight, addScrollPadding, disableClonedInput, platformHeight, false);\n    };\n    /**\n     * Reset the internal state when the text field loses focus.\n     */\n    const focusOut = () => {\n        hasKeyboardBeenPresentedForTextField = false;\n        win === null || win === void 0 ? void 0 : win.removeEventListener('ionKeyboardDidShow', keyboardShow);\n        componentEl.removeEventListener('focusout', focusOut);\n    };\n    /**\n     * When the input is about to receive\n     * focus, we need to move it to prevent\n     * mobile Safari from adjusting the viewport.\n     */\n    const focusIn = async () => {\n        /**\n         * Scroll assist should not run again\n         * on inputs that have been manually\n         * focused inside of the scroll assist\n         * implementation.\n         */\n        if (inputEl.hasAttribute(SKIP_SCROLL_ASSIST)) {\n            inputEl.removeAttribute(SKIP_SCROLL_ASSIST);\n            return;\n        }\n        jsSetFocus(componentEl, inputEl, contentEl, footerEl, keyboardHeight, addScrollPadding, disableClonedInput, platformHeight);\n        win === null || win === void 0 ? void 0 : win.addEventListener('ionKeyboardDidShow', keyboardShow);\n        componentEl.addEventListener('focusout', focusOut);\n    };\n    componentEl.addEventListener('focusin', focusIn);\n    return () => {\n        componentEl.removeEventListener('focusin', focusIn);\n        win === null || win === void 0 ? void 0 : win.removeEventListener('ionKeyboardDidShow', keyboardShow);\n        componentEl.removeEventListener('focusout', focusOut);\n    };\n};\n/**\n * Use this function when you want to manually\n * focus an input but not have scroll assist run again.\n */\nconst setManualFocus = (el) => {\n    /**\n     * If element is already focused then\n     * a new focusin event will not be dispatched\n     * to remove the SKIL_SCROLL_ASSIST attribute.\n     */\n    if (document.activeElement === el) {\n        return;\n    }\n    el.setAttribute(SKIP_SCROLL_ASSIST, 'true');\n    el.focus();\n};\nconst jsSetFocus = async (componentEl, inputEl, contentEl, footerEl, keyboardHeight, enableScrollPadding, disableClonedInput = false, platformHeight = 0, waitForResize = true) => {\n    if (!contentEl && !footerEl) {\n        return;\n    }\n    const scrollData = getScrollData(componentEl, (contentEl || footerEl), keyboardHeight, platformHeight);\n    if (contentEl && Math.abs(scrollData.scrollAmount) < 4) {\n        // the text input is in a safe position that doesn't\n        // require it to be scrolled into view, just set focus now\n        setManualFocus(inputEl);\n        /**\n         * Even though the input does not need\n         * scroll assist, we should preserve the\n         * the scroll padding as users could be moving\n         * focus from an input that needs scroll padding\n         * to an input that does not need scroll padding.\n         * If we remove the scroll padding now, users will\n         * see the page jump.\n         */\n        if (enableScrollPadding && contentEl !== null) {\n            setScrollPadding(contentEl, currentPadding);\n            setClearScrollPaddingListener(inputEl, contentEl, () => (currentPadding = 0));\n        }\n        return;\n    }\n    // temporarily move the focus to the focus holder so the browser\n    // doesn't freak out while it's trying to get the input in place\n    // at this point the native text input still does not have focus\n    relocateInput(componentEl, inputEl, true, scrollData.inputSafeY, disableClonedInput);\n    setManualFocus(inputEl);\n    /**\n     * Relocating/Focusing input causes the\n     * click event to be cancelled, so\n     * manually fire one here.\n     */\n    raf(() => componentEl.click());\n    /**\n     * If enabled, we can add scroll padding to\n     * the bottom of the content so that scroll assist\n     * has enough room to scroll the input above\n     * the keyboard.\n     */\n    if (enableScrollPadding && contentEl) {\n        currentPadding = scrollData.scrollPadding;\n        setScrollPadding(contentEl, currentPadding);\n    }\n    if (typeof window !== 'undefined') {\n        let scrollContentTimeout;\n        const scrollContent = async () => {\n            // clean up listeners and timeouts\n            if (scrollContentTimeout !== undefined) {\n                clearTimeout(scrollContentTimeout);\n            }\n            window.removeEventListener('ionKeyboardDidShow', doubleKeyboardEventListener);\n            window.removeEventListener('ionKeyboardDidShow', scrollContent);\n            // scroll the input into place\n            if (contentEl) {\n                await scrollByPoint(contentEl, 0, scrollData.scrollAmount, scrollData.scrollDuration);\n            }\n            // the scroll view is in the correct position now\n            // give the native text input focus\n            relocateInput(componentEl, inputEl, false, scrollData.inputSafeY);\n            // ensure this is the focused input\n            setManualFocus(inputEl);\n            /**\n             * When the input is about to be blurred\n             * we should set a timeout to remove\n             * any scroll padding.\n             */\n            if (enableScrollPadding) {\n                setClearScrollPaddingListener(inputEl, contentEl, () => (currentPadding = 0));\n            }\n        };\n        const doubleKeyboardEventListener = () => {\n            window.removeEventListener('ionKeyboardDidShow', doubleKeyboardEventListener);\n            window.addEventListener('ionKeyboardDidShow', scrollContent);\n        };\n        if (contentEl) {\n            const scrollEl = await getScrollElement(contentEl);\n            /**\n             * scrollData will only consider the amount we need\n             * to scroll in order to properly bring the input\n             * into view. It will not consider the amount\n             * we can scroll in the content element.\n             * As a result, scrollData may request a greater\n             * scroll position than is currently available\n             * in the DOM. If this is the case, we need to\n             * wait for the webview to resize/the keyboard\n             * to show in order for additional scroll\n             * bandwidth to become available.\n             */\n            const totalScrollAmount = scrollEl.scrollHeight - scrollEl.clientHeight;\n            if (waitForResize && scrollData.scrollAmount > totalScrollAmount - scrollEl.scrollTop) {\n                /**\n                 * On iOS devices, the system will show a \"Passwords\" bar above the keyboard\n                 * after the initial keyboard is shown. This prevents the webview from resizing\n                 * until the \"Passwords\" bar is shown, so we need to wait for that to happen first.\n                 */\n                if (inputEl.type === 'password') {\n                    // Add 50px to account for the \"Passwords\" bar\n                    scrollData.scrollAmount += SCROLL_AMOUNT_PADDING;\n                    window.addEventListener('ionKeyboardDidShow', doubleKeyboardEventListener);\n                }\n                else {\n                    window.addEventListener('ionKeyboardDidShow', scrollContent);\n                }\n                /**\n                 * This should only fire in 2 instances:\n                 * 1. The app is very slow.\n                 * 2. The app is running in a browser on an old OS\n                 * that does not support Ionic Keyboard Events\n                 */\n                scrollContentTimeout = setTimeout(scrollContent, 1000);\n                return;\n            }\n        }\n        scrollContent();\n    }\n};\n\nconst INPUT_BLURRING = true;\nconst startInputShims = async (config, platform) => {\n    /**\n     * If doc is undefined then we are in an SSR environment\n     * where input shims do not apply.\n     */\n    if (doc === undefined) {\n        return;\n    }\n    const isIOS = platform === 'ios';\n    const isAndroid = platform === 'android';\n    /**\n     * Hide Caret and Input Blurring are needed on iOS.\n     * Scroll Assist and Scroll Padding are needed on iOS and Android\n     * with Chrome web browser (not Chrome webview).\n     */\n    const keyboardHeight = config.getNumber('keyboardHeight', 290);\n    const scrollAssist = config.getBoolean('scrollAssist', true);\n    const hideCaret = config.getBoolean('hideCaretOnScroll', isIOS);\n    /**\n     * The team is evaluating if inputBlurring is still needed. As a result\n     * this feature is disabled by default as of Ionic 8.0. Developers are\n     * able to re-enable it temporarily. The team may remove this utility\n     * if it is determined that doing so would not bring any adverse side effects.\n     * TODO FW-6014 remove input blurring utility (including implementation)\n     */\n    const inputBlurring = config.getBoolean('inputBlurring', false);\n    const scrollPadding = config.getBoolean('scrollPadding', true);\n    const inputs = Array.from(doc.querySelectorAll('ion-input, ion-textarea'));\n    const hideCaretMap = new WeakMap();\n    const scrollAssistMap = new WeakMap();\n    /**\n     * Grab the native keyboard resize configuration\n     * and pass it to scroll assist. Scroll assist requires\n     * that we adjust the input right before the input\n     * is about to be focused. If we called `Keyboard.getResizeMode`\n     * on focusin in scroll assist, we could potentially adjust the\n     * input too late since this call is async.\n     */\n    const keyboardResizeMode = await Keyboard.getResizeMode();\n    const registerInput = async (componentEl) => {\n        await new Promise((resolve) => componentOnReady(componentEl, resolve));\n        const inputRoot = componentEl.shadowRoot || componentEl;\n        const inputEl = inputRoot.querySelector('input') || inputRoot.querySelector('textarea');\n        const scrollEl = findClosestIonContent(componentEl);\n        const footerEl = !scrollEl ? componentEl.closest('ion-footer') : null;\n        if (!inputEl) {\n            return;\n        }\n        if (!!scrollEl && hideCaret && !hideCaretMap.has(componentEl)) {\n            const rmFn = enableHideCaretOnScroll(componentEl, inputEl, scrollEl);\n            hideCaretMap.set(componentEl, rmFn);\n        }\n        /**\n         * date/datetime-locale inputs on mobile devices show date picker\n         * overlays instead of keyboards. As a result, scroll assist is\n         * not needed. This also works around a bug in iOS <16 where\n         * scroll assist causes the browser to lock up. See FW-1997.\n         */\n        const isDateInput = inputEl.type === 'date' || inputEl.type === 'datetime-local';\n        if (!isDateInput &&\n            (!!scrollEl || !!footerEl) &&\n            scrollAssist &&\n            !scrollAssistMap.has(componentEl)) {\n            const rmFn = enableScrollAssist(componentEl, inputEl, scrollEl, footerEl, keyboardHeight, scrollPadding, keyboardResizeMode, isAndroid);\n            scrollAssistMap.set(componentEl, rmFn);\n        }\n    };\n    const unregisterInput = (componentEl) => {\n        if (hideCaret) {\n            const fn = hideCaretMap.get(componentEl);\n            if (fn) {\n                fn();\n            }\n            hideCaretMap.delete(componentEl);\n        }\n        if (scrollAssist) {\n            const fn = scrollAssistMap.get(componentEl);\n            if (fn) {\n                fn();\n            }\n            scrollAssistMap.delete(componentEl);\n        }\n    };\n    if (inputBlurring && INPUT_BLURRING) {\n        enableInputBlurring();\n    }\n    // Input might be already loaded in the DOM before ion-device-hacks did.\n    // At this point we need to look for all of the inputs not registered yet\n    // and register them.\n    for (const input of inputs) {\n        registerInput(input);\n    }\n    doc.addEventListener('ionInputDidLoad', (ev) => {\n        registerInput(ev.detail);\n    });\n    doc.addEventListener('ionInputDidUnload', (ev) => {\n        unregisterInput(ev.detail);\n    });\n};\n\nexport { startInputShims };\n"],"names":["cloneMap","WeakMap","relocateInput","componentEl","inputEl","shouldRelocate","inputRelativeY","arguments","length","undefined","disabledClonedInput","has","addClone","removeClone","parentEl","parentNode","clonedEl","cloneNode","classList","add","tabIndex","disabled","appendChild","set","tx","ownerDocument","dir","style","pointerEvents","transform","concat","clone","get","delete","remove","enableHideCaretOnScroll","scrollEl","scrollHideCaret","shouldHideCaret","input","getRootNode","activeElement","onBlur","hideCaret","showCaret","addEventListener","removeEventListener","SKIP_SELECTOR","enableInputBlurring","focused","didScroll","doc","document","onScroll","onFocusin","onTouchend","ev","active","matches","tapped","target","closest","setTimeout","blur","getScrollData","contentEl","keyboardHeight","platformHeight","_a","itemEl","calcScrollData","getBoundingClientRect","inputRect","contentRect","inputTop","top","inputBottom","bottom","visibleAreaTop","safeAreaTop","distanceToBottom","Math","min","distanceToTop","desiredScrollAmount","round","scrollAmount","duration","abs","scrollDuration","max","scrollPadding","inputSafeY","PADDING_TIMER_KEY","setScrollPadding","paddingAmount","clearCallback","timer","clearTimeout","setProperty","setClearScrollPaddingListener","doneCallback","once","currentPadding","SKIP_SCROLL_ASSIST","enableScrollAssist","footerEl","enableScrollPadding","keyboardResize","disableClonedInput","addScrollPadding","mode","KeyboardResize","None","hasKeyboardBeenPresentedForTextField","win","innerHeight","keyboardShow","jsSetFocus","detail","focusOut","focusIn","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","hasAttribute","removeAttribute","abrupt","stop","apply","setManualFocus","el","setAttribute","focus","_ref2","_callee3","waitForResize","scrollData","scrollContentTimeout","scrollContent","doubleKeyboardEventListener","totalScrollAmount","_args3","_context3","raf","click","window","_ref3","_callee2","_context2","scrollByPoint","getScrollElement","sent","scrollHeight","clientHeight","scrollTop","type","_x","_x2","_x3","_x4","_x5","_x6","startInputShims","_ref4","_callee5","config","platform","isIOS","isAndroid","scrollAssist","inputBlurring","inputs","hideCaretMap","scrollAssistMap","keyboardResizeMode","registerInput","unregisterInput","_i","_inputs","_context5","getNumber","getBoolean","Array","from","querySelectorAll","Keyboard","getResizeMode","_ref5","_callee4","inputRoot","rmFn","_rmFn","_context4","Promise","resolve","componentOnReady","shadowRoot","querySelector","findClosestIonContent","_x9","fn","_x7","_x8"],"sourceRoot":""}